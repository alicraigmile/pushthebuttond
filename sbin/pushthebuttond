#!/usr/bin/env python

#https://gist.github.com/alicraigmile/7f5526c8058e35243dba/edit

import RPi.GPIO as GPIO
import time
import os
import ConfigParser

CONFIG_FILE = "pushthebuttond.cfg"

config = ConfigParser.ConfigParser()
config.read(CONFIG_FILE)

def gpio_setup():
  GPIO.setmode(GPIO.BCM)
  led_pin    = config.getint('gpio','led')
  button_pin = config.getint('gpio','button')
  GPIO.setup(led_pin,GPIO.OUT)
  GPIO.setup(button_pin,GPIO.IN)
  print "LED on GPIO" + str(led_pin) + "..."
  print "Listening for button on GPIO" + str(button_pin)+ "..."

def gpio_teardown():
  print "Done with LED and button. Releasing GPIO ports..."
  GPIO.cleanup()
  print "ok"

def flash_led(led_pin,times):
  delay = 0.1
  for _ in xrange(times):
    switch_led_off(led_pin)
    time.sleep(delay)
    switch_led_on(led_pin)
    time.sleep(delay)

def switch_led_on(led_pin):
      GPIO.output(led_pin,GPIO.HIGH)

def switch_led_off(led_pin):
      GPIO.output(led_pin,GPIO.LOW)

gpio_setup()

try:
  led_pin    = config.getint('gpio','led')
  button_pin = config.getint('gpio','button')
  job        = config.get('actions','job')
  print "Hello, I'm ready to run '"+job+"' when you need me to."
  #initialise a previous input variable to 0 (assume button not pressed last)
  prev_input = 0
  while True:
    #take a reading
    input = GPIO.input(button_pin)
    #if the last reading was low and this one high, print
    if ((not prev_input) and input):
      print("Button pressed - i'll now run the job")
      switch_led_on(led_pin)
      os.system(job)

      #flash the led twice once the job completes and then turn it off
      flash_led(led_pin,2)
      switch_led_off(led_pin)
      print "Job complete. Listening again on GPIO" + str(button_pin) + "..."
    #update previous input
    prev_input = input
    #slight pause to debounce
    time.sleep(0.05)
except KeyboardInterrupt:
  print "SIGINT received. Exitting..."
finally:
  gpio_teardown()
  print "Bye :)"

